---
layout: post
title:  "TIL(20240628) [기술면접질문]"
date:  2024-06-28
categories: TIL 기술면접
---

---------------------------------------------------------------------


# 📌 기술면접질문

- 통합 테스트와 단위 테스트의 차이점에 대해서 설명해주세요.<br>
: 통합테스트는 여러 모듈간의 상호작용(모듈의 호환성)이 올바르게 동작하는지 확인하는 테스트이고 단위테스트는 하나의 모듈, 하나의 기능이 올바르게 동작하는지 확인하는 독립적인 테스트입니다.

- 통합 테스트과 단위 테스트의 장/단점에 대해서 설명해주세요.<br>
: 통합테스트의 장점을 먼저 말씀드리자면 실제 빈을 직접 띄워서 테스트 하기 때문에 운영환경과 가장 유사한 테스트를 할 수 있고 서로 다른 컴포넌트들이 통합되었을 때 발생할 수 있는 오류를 발견할 수 있지만(API오류응답이나 Null포인트오류 등) 실제 빈을 직접 띄워서 실행시키기 때문에 테스트시간이 오래걸리고 많은 코드를 테스트 하기 때문에 어디서 에러가 발생했는지 확인이 쉽지 않아 유지보수측면에서는 좋지 않을 수 있습니다. 단위테스트의 장점은 통합테스트에 비해 하나의 모듈을 확인하는 테스트이기에 시간이 절감되고 자신이 작성한 코드를 확인검증 할 수 있으며 코드를 리팩토링하여도 빠르게 문제여부를 확인할 수 있다는 장점이 있으나 독립적인 테스트이기에 연결된 다른객체들을 가짜객체로 대체하여 어떤 결과에 대한 반환값을 개발자가 직접 정해주어야 하는 상황이 발생합니다. (stub) 여기서 개인적으로 들었던 생각은 이 단위테스트가 실제환경에서 제대로 작동을 하는 걸까 라는 생각이 들었던 것 같습니다. 

- 레이어별로 나누어서 Slice Test 를 하는 이유에 대해서 설명해주세요.
- 테스트 코드를 직접 짰을 때, 느낀 테스트 코드 작성의 필요성을 설명해주세요.
- JPA와 Hibernate의 차이점은 무엇인가요?
- QueryDSL을 사용하여 복잡한 동적 쿼리를 작성하는 방법을 설명해 주세요.
- 프로젝트에서 좋아요 기능을 구현할 때, 특정 사용자가 특정 게시글을 이미 좋아요 했는지 확인하는 방법을 설명해 주세요.
- JPA에서 Lazy Loading과 Eager Loading의 차이점은 무엇인가요? 각각의 장단점에 대해 설명해 주세요.
- JPA에서 N+1 문제를 해결하기 위한 방법을 설명해 주세요.
- ⭐⭐⭐⭐(CS)트랜잭션(특징,프로세스 등)


-----------------------------------------------------------------

# 📌 QueryDSL 작성

이전 아웃소싱 프로젝트에서 익명/비익명 게시판을 주제로 프로젝트를 구현했으므로 Post/PublicPost로 나뉘게 된다.

과제 요구사항에 따라 추가해야 할 부분이 필요했는데, 프로젝트에서는 따로 게시물 조회시 responseDto에서 likeCount의 필드를 별도로 가지고 있지 않아 추가를 해주었고, likeCount의 경우 likeCount를 조회하는 쿼리문을 구현해주셔서 가져오는 형식으로 했다. 

- **게시글 및 댓글 단건조회 응답에 좋아요 개수 추가**
    - 게시글 단건 정보 조회시 게시글의 좋아요 개수필드를 추가합니다.
    - 댓글 단건 정보 조회시 댓글의 좋아요 개수필드를 추가합니다.

아래는 비익명게시판의 Dto이다.

```java

@Getter
public class PublicPostResponseDto {
    String title;
    String content;
    String userName;
    LocalDateTime createdAt;
    LocalDateTime modifiedAt;
    int likeCount;

    public PublicPostResponseDto(PublicPost post, int likeCount) {
        this.title = post.getTitle();
        this.content = post.getContent();
        this.userName = post.getUser().getUserName();
        this.createdAt = post.getCreatedAt();
        this.modifiedAt = post.getModifiedAt();
        this.likeCount = likeCount;
    }

    public PublicPostResponseDto(PublicPost post) {
        this.title = post.getTitle();
        this.content = post.getContent();
        this.userName = post.getUser().getUserName();
        this.createdAt = post.getCreatedAt();
        this.modifiedAt = post.getModifiedAt();
        this.likeCount = 0;
    }

```
