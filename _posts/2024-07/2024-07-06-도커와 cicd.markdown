---
layout: post
title:  "TIL(20240706) [Docker? CI/CD?]"
date:  2024-07-06
categories: TIL docker CI/CD
---

----------------------------------------------------------------------------

드디어 배포하는 법을 배우게 되는구나...!!!! 🤣
아직 AWS에 대해서 완벽히 이해한 건 아니지만 반복학습을 통해 자연스럽게.. 익숙해지려고 한다. docker또한 그렇다!

CI/CD가 무엇인지 먼저 알아본 다음에 docker의 개념 및 설치를 해보려고 한다.

# 📌 CI/CD ?
- CI(지속적 통합): 개발자를 위한 자동화 프로세스라고 볼 수 있으며, Code-Build-Test 단계에서 꾀할 수 있다.

```
code : 개발자가 코드를 원격 코드 저장소에 push하는 단계
build : 원격 코드 저장소로부터 코드를 가져와 유닛테스트 후 빌드하는 단계
test : 코드 빌드 결과물이 다른 컴포넌트와 잘 통합되는지 확인하는 과정
```
- CD(지속적 배포): 지속적인 서비스제공 및 지속적인 배포를 의미하며 이 두 용어는 상호 교환적으로 사용되고, Release-Deploy-Operate단계에서 꾀할 수 있다.

```
release: 배포 가능한 소프트웨어 패키지 작성
deploy: 프로비저닝을 실행하고 서비스를 사용자에게 노출-> 실질적인 배포
Operate: 서비스 현황을 파악하고 생길 수 있는 문제를 감지
```

- 즉 CI/CD 는 코드작성->빌드-> 테스트-> 배포의 과정을 가진다. 

```
1. 코드 작성: 개발자들은 소스 코드를 작성하고 저장소(repository)에 업로드
2. 빌드: 저장소에서 최신 소스 코드를 가져와 빌드를 수행. 빌드는 소스 코드를 컴파일하고, 라이브러리를 추가하고, 필요한 파일을 생성하는 과정.
3. 테스트: 빌드된 결과물을 대상으로 테스트를 수행. 테스트는 기능이 정상적으로 작동하는지 확인하고, 버그를 발견하고 수정하는 과정.
4. 배포: 테스트를 통과한 결과물을 배포. 배포는 서버에 업로드하거나, 사용자에게 제공하는 과정
```

## 📌 Docker를 사용하는 이유는? 
- 도커 컨테이너 내부에서 여러 소프트웨어를 설치해도 호스트 OS에는 영향이 없다. 
- 어플리케이션 개발과 배포가 변해진다.
- CI/CD에서 지속적인 통합과정의 테스트에서 docker를 활용한다.
- 어떤 서버에 올리더라도 같은 환경으로 구성된 컨테이너로 동작하기 때문에 표준화된 배포를 구성할 수 있다.
- 여러 어플리케이션의 독립성과 확장성이 높아진다.


### docker 설치

Win + X : powershell(관리자) 실행