---
layout: post
title:  "TIL(20240714) [프론트 드래그앤드롭 - 카드 순서이동/ 카드 작업자별 조회]"
date:  2024-07-14
categories: TIL thymeleaf
---

----------------------------------------------------------------------------

[카드순서이동- 드래그앤드롭 시연영상](https://www.veed.io/view/e0716612-6b0c-4806-bd18-a518661c86f0?panel=share)

먼저 위 영상을 보고 오면 DB 결과가 이해가 됩니다!

![image](https://github.com/user-attachments/assets/3ce6605f-4e91-4f6c-aa6f-6b1a2bdd281f)


![image](https://github.com/user-attachments/assets/c4e7afbc-2304-4aa8-b28a-4e3df77d7d05)



그리고 마무리 작업으로 카드 조회시 작업자별 조회 기능까지 구현해보았다.

```java
@Repository
@RequiredArgsConstructor
public class CardCustomRepositoryImpl implements CardCustomRepository{

  private final JPAQueryFactory queryFactory;

  public List<CardResponseDto> findCardsInColumn(CardSearchCondDto searchCond) {
    QColumns column = QColumns.columns;
    QCard card = QCard.card;

    List<CardResponseDto> cardList = queryFactory
        .select(Projections.constructor(CardResponseDto.class, card))
        .from(card)
        .innerJoin(card.columns, column)
        .where(isWhere(searchCond))
        .limit(10)
        .fetch();

    return cardList;
  }


  private BooleanExpression isWhere (CardSearchCondDto searchCond) {
    BooleanExpression result = null;
    if(searchCond.getUsername().isEmpty()){
      throw new CustomException(ErrorEnum.USER_NOT_FOUND);
    }
    return result = card.user.name.eq(searchCond.getUsername());
  }
}

```
Query문에 대해서 코드 풀이를 해보자면
dto형태로 객체를 생성해서 가져오도록 하고 
엔티티 기준으로 조회하여 card테이블에 있는 card의 column_id와 column 테이블을 묶어서 where에 해당하는 조건을 가져오도록 한다. 동적쿼리를 만들어..?보려고.. BooleanExpression을 사용했는데, 처음에는 전체조회/작업자별/카드상태별로 가져오려고 해당 쿼리를 저렇게 짰는데.. 지금 프론트랑 연결한 시점에서 전체조회와 카드상태별은 필요한 기능이 아닌거 같아서 작업자별로 조회하도록 수정했다.  

service 쪽

```java

 public List<CardResponseDto> getAllCards(CardSearchCondDto searchCond, Long userId) {
    User user = userRepository.findById(userId).orElseThrow(()-> new CustomException(ErrorEnum.USER_NOT_AUTHENTICATED));
    List<CardResponseDto> cardList = cardRepository.findCardsInColumn(searchCond);
    return cardList;
  }

```

controller

```java

@GetMapping("/cards")
  public ResponseEntity<ApiResponse<List<CardResponseDto>>> getAllCards(@RequestBody CardSearchCondDto searchCond, @AuthenticationPrincipal UserDetailsImpl userDetails) {
    List<CardResponseDto> cardList = cardService.getAllCards(searchCond, userDetails.getUser().getId());
    ApiResponse<List<CardResponseDto>> response = new ApiResponse<>("카드 전체조회 성공", "200", cardList);
    return new ResponseEntity<>(response, HttpStatus.OK);
  }

```